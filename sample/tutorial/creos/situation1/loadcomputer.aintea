package smartgrid.situation1

import smartgrid.*
import aintea.lang.*

void computeLoad(Substation substation) {
	Fuse[] subs_fuses = substation.fuses;
	Fuse fuse = subs_fuses[0];
	
	Cable cable = fuse.cable;
	
	if(exist(fuse.isClosed, 1.) && !(fuse.isClosed[1])) { //confident that the fuse is open
		substation.load = new DiracDeltaFct<double>(0., 1.);
		cable.load = new DiracDeltaFct<double>(0., 1.);
	} else {
		Customer[] customers = cable.customers;
		if(customers.length == 0) {
			substation.load = new DiracDeltaFct<double>(0., 1.);
			cable.load = new DiracDeltaFct<double>(0., 1.);
		} else {
			Customer c = customers[0];
			Gaussian<double> gauss_sum = c.consumption;
			
			for(int i=1; i<customers.length; i=i+1) {
				Customer c = customers[i];
				gauss_sum = gauss_sum + c.consumption;
			}
			
			Bernoulli<bool> isClosed = fuse.isClosed;
			Bernoulli bern_isClosed = isClosed.confidence;
			double prob_isClosed = bern_isClosed.probability;
			
			MultPossibilities<double> load = new MultPossibilities<double>();
			PossibilityDouble[] possibilities = new PossibilityDouble[2];
			load.values = possibilities;
			
			PossibilityDouble p1 = new PossibilityDouble();//open
			p1.value = new DiracDeltaFct<double>(0, 1); 
			p1.confidence = 1-prob_isClosed;
			possibilities[0] = p1;
			
			PossibilityDouble p2 = new PossibilityDouble();//closed
			p2.value = gauss_sum;
			p2.confidence = prob_isClosed;
			possibilities[1] = p2;
			
			cable.load = load;
			substation.load = load;
		}
	}
	
	Fuse endFuse = cable.end;
	Entity endEntity = endFuse.entity;
	endEntity.load = new Gaussian<double>(0., 0);
	
	
}