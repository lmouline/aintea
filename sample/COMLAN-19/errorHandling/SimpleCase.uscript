class Substation {
	Fuse[] fuses;
		
	Cable[] getCables() {
		Cable[] cables = new Cable[fuses.length];
		for(int i=0; i<cables.length; i=i+1) {
			Fuse f = fuses[i];
			cables[i] = f.cable;
		}
		
		computeLoad();
	}
}

class Cabinet extends Substation{}

class DeadEndCabinet extends Substation{}

class SmartMeter {}

class Cable {
	Fuse startPoint;
	Fuse endPoint;
	SmartMeter[] meters;
	
	Gaussian<double> load;
	double capacity = 100;
}

class Fuse {
	Cable cable;
	Bernoulli<bool> isClosed;
}

Bernoulli<bool> noCableConnected(Substation sub) {
	Bernoulli<bool> noCable;	
	Fuse[] fuses = sub.fuses;
	
	if(fuses.length > 0) {
		Fuse f = fuses[0];
		noCable = f.isClosed;
	} else {
//		return new Bernoulli<bool>(true, 0.1, "", "");
	}
	 
//	for(int i=0; i<fuses.length; i=i+1) {
//		Fuse f = fuses[i];
//		if(f.isClosed = )
//	}
	
	return noCable;
}

void computeLoad(Substation sub) {		
	Cable[] cables = sub.getCables();
}

void main() {
	computeLoad(null);
}