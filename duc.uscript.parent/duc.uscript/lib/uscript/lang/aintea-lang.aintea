package aintea.lang

class Primitive {}

class String extends Primitive{}
class Char extends Primitive{}
class Boolean extends Primitive{}

class Numeric extends Primitive{}
class Long extends Numeric{}
class Int extends Long{}
class Short extends Int{}
class Byte extends Short{}
class Double extends Numeric{}
class Float extends Numeric{}

class Array {}
class StringArray extends Array {}
class IntArray extends Array {}
class BooleanArray extends Array{}
class ByteArray extends Array{}
class LongArray extends Array{}
class DoubleArray extends Array{}
class ShortArray extends Array{}
class FloatArray extends Array{}
class CharArray extends Array{}
class UsrDefArray extends Array {
	
}

class Null{}

class BernoulliDist {
	double probability;
}

class GaussianDist {
	double mean;
	double variance;
}

class RayleighDist {
	double mean;
	double variance;
}

class BinomialDist {
	double mean;
	double variance;
}

class DiracDeltaFunction {
	double shift;
	double confidence;
}

class UncertainType {}

class BernoulliType extends UncertainType {
	BernoulliDist confidence;
}

class BernoulliBool extends BernoulliType {
	bool value;
}

class UncertainNumeric extends UncertainType{}

class GaussianType extends UncertainNumeric {
	GaussianDist confidence;
}

class GaussianDouble extends GaussianType {
	double value;
}

class GaussianFloat extends GaussianType {
	float value;
}

class RayleighType extends UncertainNumeric {
	RayleighDist confidence;
}

class RayleighDouble extends RayleighType {
	double value;
}

class RayleighFloat extends RayleighType {
	float value;
}

class BinomialType extends UncertainNumeric {
	BinomialDist confidence;
}

class BinomialLong extends BinomialType {
	long value;
}

class BinomialInt extends BinomialType {
	int value;
}

class BinomialShort extends BinomialType {
	short value;
}

class BinomialByte extends BinomialType {
	byte value;
}

class DiracDeltaFunctionType extends UncertainNumeric {
	DiracDeltaFunction confidence;
}

class DiracDeltaFunctionLong extends DiracDeltaFunctionType {
	long value;
}

class DiracDeltaFunctionInt extends DiracDeltaFunctionType {
	int value;
}

class DiracDeltaFunctionShort extends DiracDeltaFunctionType {
	short value;
}

class DiracDeltaFunctionByte extends DiracDeltaFunctionType {
	byte value;
}

class DiracDeltaFunctionDouble extends DiracDeltaFunctionType {
	double value;
}

class DiracDeltaFunctionFloat extends DiracDeltaFunctionType {
	float value;
}

class MultPossibilitiesType extends UncertainNumeric {}

class Possibility {
	double confidence;
}

class BytePossibility extends Possibility {
	byte value;	
}
class MultPossibilitiesByte extends MultPossibilitiesType {
	BytePossibility[] possibilities; 
}

class ShortPossibility extends Possibility {
	short value;	
}
class MultPossibilitiesShort extends MultPossibilitiesType {
	ShortPossibility[] possibilities; 
}

class IntPossibility extends Possibility {
	int value;	
}
class MultPossibilitiesInt extends MultPossibilitiesType {
	IntPossibility[] possibilities; 
}

class LongPossibility extends Possibility {
	long value;	
}
class MultPossibilitiesLong extends MultPossibilitiesType {
	LongPossibility[] possibilities; 
}

class FloatPossibility extends Possibility {
	float value;	
}
class MultPossibilitiesFloat extends MultPossibilitiesType {
	FloatPossibility[] possibilities; 
}

class DoublePossibility extends Possibility {
	double value;	
}
class MultPossibilitiesDouble extends MultPossibilitiesType {
	DoublePossibility[] possibilities; 
}
