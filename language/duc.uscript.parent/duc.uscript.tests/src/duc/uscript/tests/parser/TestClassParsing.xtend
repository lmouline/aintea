/*
 * generated by Xtext 2.16.0
 */
package duc.uscript.tests.parser

import com.google.inject.Inject
import duc.uscript.uScript.Program
import duc.uscript.uScript.Class
import duc.uscript.uScript.Parameter
import duc.uscript.uScript.Field
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.extensions.InjectionExtension
import org.eclipse.xtext.testing.util.ParseHelper
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.^extension.ExtendWith
import static org.junit.jupiter.api.Assertions.assertEquals
import static org.junit.jupiter.api.Assertions.assertNotNull
import static org.junit.jupiter.api.Assertions.assertNull
import static org.junit.jupiter.api.Assertions.assertTrue
import duc.uscript.uScript.DoubleTypeRef
import duc.uscript.uScript.IntegerTypeRef
import duc.uscript.uScript.Method
import duc.uscript.uScript.StringTypeRef
import duc.uscript.tests.UScriptInjectorProvider

@ExtendWith(InjectionExtension)
@InjectWith(UScriptInjectorProvider)
class TestClassParsing {
	@Inject extension ParseHelper<Program>
	
	@Test
	def void oneClassScript() {
		val script = '''
			class MyClass {
				double att1;
				int att2;
				
				void myMethod1(int param1, string param2) {}
				void myMethod2(int param1, string param2, double param3);
			}
		'''.parse
		
		val elements = script.elements
		assertEquals(1, elements.size)
		
		val myClass = elements.get(0) as Class
		assertEquals("MyClass", myClass.name)
		
		val members = myClass.members
		assertNotNull(members)
		assertEquals(4, myClass.members.size)
		
		val field1 = members.get(0) as Field
		assertEquals("att1", field1.name)
		assertTrue(field1.typeRef instanceof DoubleTypeRef, '''Expected: «DoubleTypeRef», Actual: «field1.typeRef»''')
		
		val field2 = members.get(1) as Field
		assertEquals("att2", field2.name)
		assertTrue(field2.typeRef instanceof IntegerTypeRef, '''Expected: «IntegerTypeRef», Actual: «field2.typeRef»''')
		
		val method1 = members.get(2) as Method
		assertEquals("myMethod1", method1.name)
		val paramsM1 = method1.params
		assertEquals(2, paramsM1.size)
		val paramsM1_1 = paramsM1.get(0)
		assertEquals("param1", paramsM1_1.name)
		assertTrue(paramsM1_1.typeRef instanceof IntegerTypeRef, '''Expected: «IntegerTypeRef», Actual: «paramsM1_1.typeRef»''')
		val paramsM1_2 = paramsM1.get(1)
		assertEquals("param2", paramsM1_2.name)
		assertTrue(paramsM1_2.typeRef instanceof StringTypeRef, '''Expected: «StringTypeRef», Actual: «paramsM1_2.typeRef»''')
		assertNotNull(method1.body)
		
		val method2 = members.get(3) as Method
		assertEquals("myMethod2", method2.name)
		val paramsM2 = method2.params
		assertEquals(3, paramsM2.size)
		val paramsM2_1 = paramsM2.get(0)
		assertEquals("param1", paramsM2_1.name)
		assertTrue(paramsM2_1.typeRef instanceof IntegerTypeRef, '''Expected: «IntegerTypeRef», Actual: «paramsM2_1.typeRef»''')
		val paramsM2_2 = paramsM2.get(1)
		assertEquals("param2", paramsM2_2.name)
		assertTrue(paramsM2_2.typeRef instanceof StringTypeRef, '''Expected: «StringTypeRef», Actual: «paramsM2_2.typeRef»''')
		val paramsM2_3 = paramsM2.get(2)
		assertEquals("param3", paramsM2_3.name)
		assertTrue(paramsM2_3.typeRef instanceof DoubleTypeRef, '''Expected: «DoubleTypeRef», Actual: «paramsM2_3.typeRef»''')
		assertNull(method2.body)
	}
}
